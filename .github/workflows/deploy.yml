name: Build and Deploy patrimoine

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: rayengh01/patrimoine
  CONTAINER_NAME: patrimoine-container

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to server
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        command_timeout: 20m
        script: |
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm ${{ env.CONTAINER_NAME }} || true
          
          # Get current image ID before pulling new one
          echo "Getting current image ID..."
          OLD_IMAGE_ID=$(docker images ${{ env.DOCKER_IMAGE }}:latest -q)
          
          # Pull latest image
          echo "Pulling latest image..."
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          
          # Remove old image if it exists and is different from new one
          if [ ! -z "$OLD_IMAGE_ID" ]; then
            NEW_IMAGE_ID=$(docker images ${{ env.DOCKER_IMAGE }}:latest -q)
            if [ "$OLD_IMAGE_ID" != "$NEW_IMAGE_ID" ]; then
              echo "Removing old image: $OLD_IMAGE_ID"
              docker rmi $OLD_IMAGE_ID || true
            else
              echo "Image is already up to date"
            fi
          fi
          
          # Run new container with same configuration as in updating.md
          echo "Starting new container..."
          docker run -d \
            --restart always \
            -p 8085:8085 \
            -e VOYAGE_API_KEY="${{ secrets.VOYAGE_API_KEY }}" \
            -e GOOGLE_API_KEY="${{ secrets.GOOGLE_API_KEY }}" \
            -e PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
            -e OPENROUTER_API_KEY="${{ secrets.OPENROUTER_API_KEY }}" \
            -e OPENROUTER_BASE_URL="${{ secrets.OPENROUTER_BASE_URL }}" \
            -e COHERE_API_KEY="${{ secrets.COHERE_API_KEY }}" \
            -e LANGSMITH_TRACING="${{ secrets.LANGSMITH_TRACING }}" \
            -e LANGSMITH_ENDPOINT="${{ secrets.LANGSMITH_ENDPOINT }}" \
            -e LANGSMITH_API_KEY="${{ secrets.LANGSMITH_API_KEY }}" \
            -e LANGSMITH_PROJECT="${{ secrets.LANGSMITH_PROJECT }}" \
            --name ${{ env.CONTAINER_NAME }} \
            ${{ env.DOCKER_IMAGE }}:latest
          
          # Wait a moment for container to initialize
          echo "Waiting for container to initialize..."
          sleep 10
          
          # Verify container is running
          echo "Verifying container status..."
          if docker ps | grep ${{ env.CONTAINER_NAME }}; then
            echo "✅ Container is running successfully!"
            docker ps --filter "name=${{ env.CONTAINER_NAME }}" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          else
            echo "❌ Container failed to start!"
            echo "Container logs:"
            docker logs ${{ env.CONTAINER_NAME }} || true
            exit 1
          fi